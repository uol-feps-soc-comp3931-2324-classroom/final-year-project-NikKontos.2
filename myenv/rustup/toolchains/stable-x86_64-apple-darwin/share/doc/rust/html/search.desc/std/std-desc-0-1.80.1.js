searchState.loadedDescShard("std", 0, "The Rust Standard Library\nThe size of this integer type in bits.\nThe size of this integer type in bits.\nThe size of this integer type in bits.\nThe size of this integer type in bits.\nThe size of this integer type in bits.\nThe size of this integer type in bits.\nThe size of this integer type in bits.\nThe size of this integer type in bits.\nThe size of this integer type in bits.\nThe size of this integer type in bits.\nThe size of this integer type in bits.\nThe size of this integer type in bits.\nApproximate number of significant digits in base 10.\nApproximate number of significant digits in base 10.\nApproximate number of significant digits in base 10.\nApproximate number of significant digits in base 10.\nMachine epsilon value for <code>f16</code>.\nMachine epsilon value for <code>f32</code>.\nMachine epsilon value for <code>f64</code>.\nMachine epsilon value for <code>f128</code>.\nInfinity (∞).\nInfinity (∞).\nNumber of significant digits in base 2.\nNumber of significant digits in base 2.\nNumber of significant digits in base 2.\nNumber of significant digits in base 2.\nThe highest valid code point a <code>char</code> can have, <code>&#39;\\u{10FFFF}&#39;</code>.\nLargest finite <code>f16</code> value.\nLargest finite <code>f32</code> value.\nLargest finite <code>f64</code> value.\nLargest finite <code>f128</code> value.\nThe largest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nMaximum x for which 10x is normal.\nMaximum x for which 10x is normal.\nMaximum x for which 10x is normal.\nMaximum x for which 10x is normal.\nMaximum possible power of 2 exponent.\nMaximum possible power of 2 exponent.\nMaximum possible power of 2 exponent.\nMaximum possible power of 2 exponent.\nThe lowest valid code point a <code>char</code> can have, <code>&#39;\\0&#39;</code>.\nSmallest finite <code>f16</code> value.\nSmallest finite <code>f32</code> value.\nSmallest finite <code>f64</code> value.\nSmallest finite <code>f128</code> value.\nThe smallest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nMinimum x for which 10x is normal.\nMinimum x for which 10x is normal.\nMinimum x for which 10x is normal.\nMinimum x for which 10x is normal.\nOne greater than the minimum possible normal power of 2 …\nOne greater than the minimum possible normal power of 2 …\nOne greater than the minimum possible normal power of 2 …\nOne greater than the minimum possible normal power of 2 …\nSmallest positive normal <code>f16</code> value.\nSmallest positive normal <code>f32</code> value.\nSmallest positive normal <code>f64</code> value.\nSmallest positive normal <code>f128</code> value.\nNot a Number (NaN).\nNot a Number (NaN).\nNegative infinity (−∞).\nNegative infinity (−∞).\nThe radix or base of the internal representation of <code>f16</code>.\nThe radix or base of the internal representation of <code>f32</code>.\nThe radix or base of the internal representation of <code>f64</code>.\nThe radix or base of the internal representation of <code>f128</code>.\n<code>U+FFFD REPLACEMENT CHARACTER</code> (�) is used in Unicode to …\nThe implementing type within a <code>trait</code> or <code>impl</code> block, or the …\nThe version of Unicode that the Unicode parts of <code>char</code> and …\nComputes the absolute value of <code>self</code>.\nComputes the absolute value of <code>self</code>.\nComputes the absolute value of <code>self</code>.\nComputes the absolute value of <code>self</code>.\nComputes the absolute value of <code>self</code>.\nComputes the absolute value of <code>self</code>.\nComputes the absolute value of <code>self</code>.\nComputes the absolute value of <code>self</code>.\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nThe positive difference of two numbers.\nThe positive difference of two numbers.\nComputes the arccosine of a number. Return value is in …\nComputes the arccosine of a number. Return value is in …\nInverse hyperbolic cosine function.\nInverse hyperbolic cosine function.\nCalculates the offset from a pointer (convenience for …\nCalculates the offset from a pointer (convenience for …\nGets the “address” portion of the pointer.\nGets the “address” portion of the pointer.\nComputes the offset that needs to be applied to the …\nComputes the offset that needs to be applied to the …\nTransmute the slice to a slice of another type, ensuring …\nTransmute the mutable slice to a mutable slice of another …\nMemory allocation APIs.\nUtilities for dynamic typing or type reflection.\nSIMD and vendor intrinsics module.\nA fixed-size array, denoted <code>[T; N]</code>, for the element type, <code>T</code>…\nUtilities for the array primitive type.\nReturns an iterator over <code>N</code> elements of the slice at a …\nReturns an iterator over <code>N</code> elements of the slice at a …\nReturns an iterator over overlapping windows of <code>N</code> elements …\nCast between types, or rename an import.\nReturns <code>Some</code> if the value is within the ASCII range, or …\nConverts this array of bytes into a array of ASCII …\nIf this slice <code>is_ascii</code>, returns it as a slice of ASCII …\nIf this string slice <code>is_ascii</code>, returns it as a slice of …\nIf the value of this byte is within the ASCII range, …\nConverts this array of bytes into a array of ASCII …\nConverts this slice of bytes into a slice of ASCII …\nViews this slice of ASCII characters as a slice of <code>u8</code> …\nConverts a string slice to a byte slice. To convert the …\nConverts a mutable string slice to a mutable byte slice.\nSplits the slice into a slice of <code>N</code>-element arrays, …\nSplits the slice into a slice of <code>N</code>-element arrays, …\nSplits the slice into a slice of <code>N</code>-element arrays, …\nSplits the slice into a slice of <code>N</code>-element arrays, …\nTakes a <code>&amp;[[T; N]]</code>, and flattens it to a <code>&amp;[T]</code>.\nTakes a <code>&amp;mut [[T; N]]</code>, and flattens it to a <code>&amp;mut [T]</code>.\nReturns <code>None</code> if the pointer is null, or else returns a …\nReturns a raw pointer to the array’s buffer.\nReturns a raw pointer to the slice’s buffer.\nReturns an unsafe mutable pointer to the slice’s buffer.\nConverts a mutable string slice to a raw pointer.\nReturns the two unsafe mutable pointers spanning the slice.\nReturns a raw pointer to a mutable slice containing the …\nReturns a mutable slice containing the entire array. …\nReturns a unique reference to the value behind the pointer.\nReturns a raw pointer to the slice’s buffer.\nReturns a raw pointer to the array’s buffer.\nReturns a raw pointer to the slice’s buffer.\nConverts a string slice to a raw pointer.\nReturns the two raw pointers spanning the slice.\nSplits the slice into a slice of <code>N</code>-element arrays, …\nSplits the slice into a slice of <code>N</code>-element arrays, …\nReturns <code>None</code> if the pointer is null, or else returns a …\nReturns <code>None</code> if the pointer is null, or else returns a …\nReturns a shared reference to the value behind the pointer.\nReturns a shared reference to the value behind the pointer.\nSplit a slice into a prefix, a middle of aligned SIMD …\nSplit a mutable slice into a mutable prefix, a middle of …\nReturns a raw pointer to a slice containing the entire …\nReturns a slice containing the entire array. Equivalent to …\nViews this slice of ASCII characters as a UTF-8 <code>str</code>.\nReturns <code>None</code> if the pointer is null, or else returns a …\nReturns <code>None</code> if the pointer is null, or else returns a …\nReturns <code>None</code> if the pointer is null, or else returns a …\nReturns <code>None</code> if the pointer is null, or else returns a …\nReturns <code>None</code> if the pointer is null, or else returns a …\nReturns <code>None</code> if the pointer is null, or else returns a …\nOperations on ASCII strings and characters.\nComputes the arcsine of a number. Return value is in …\nComputes the arcsine of a number. Return value is in …\nInverse hyperbolic sine function.\nInverse hyperbolic sine function.\nAsserts that a boolean expression is <code>true</code> at runtime.\nAsserts that two expressions are equal to each other …\nUnstable module containing the unstable <code>assert_matches</code> …\nAsserts that two expressions are not equal to each other …\nReturn a <code>Future</code> instead of blocking the current thread.\nComposable asynchronous iteration.\nComputes the arctangent of a number. Return value is in …\nComputes the arctangent of a number. Return value is in …\nComputes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…\nComputes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…\nInverse hyperbolic tangent function.\nInverse hyperbolic tangent function.\nSuspend execution until the result of a <code>Future</code> is ready.\nSupport for capturing a stack backtrace of an OS thread\nBinary searches this slice for a given element. If the …\nBinary searches this slice with a comparator function.\nBinary searches this slice with a key extraction function.\nThe boolean type.\nA module for working with borrowed data.\nCalculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and checks for overflow.\nCalculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and checks for overflow.\nCalculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and checks for overflow.\nCalculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and checks for overflow.\nCalculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and checks for overflow.\nCalculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and returns a tuple …\nCalculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and returns a tuple …\nCalculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and returns a tuple …\nCalculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and returns a tuple …\nCalculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and returns a tuple …\nCalculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and checks for overflow.\nCalculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and returns a tuple …\nThe <code>Box&lt;T&gt;</code> type for heap allocation.\nExit early from a loop or labelled block.\nCalculates the offset from a pointer in bytes (convenience …\nCalculates the offset from a pointer in bytes (convenience …\nCalculates the offset from a pointer in bytes.\nCalculates the offset from a pointer in bytes.\nCalculates the distance between two pointers. The returned …\nCalculates the distance between two pointers. The returned …\nCalculates the offset from a pointer in bytes (convenience …\nCalculates the offset from a pointer in bytes (convenience …\nAn iterator over the bytes of a string slice.\nCalculates <code>self</code> + <code>rhs</code> + <code>carry</code> and checks for overflow.\nCalculates <code>self</code> + <code>rhs</code> + <code>carry</code> and checks for overflow.\nCalculates <code>self</code> + <code>rhs</code> + <code>carry</code> and checks for overflow.\nCalculates <code>self</code> + <code>rhs</code> + <code>carry</code> and checks for overflow.\nCalculates <code>self</code> + <code>rhs</code> + <code>carry</code> and checks for overflow.\nCalculates <code>self</code> + <code>rhs</code> + <code>carry</code> and returns a tuple …\nCalculates <code>self</code> + <code>rhs</code> + <code>carry</code> and returns a tuple …\nCalculates <code>self</code> + <code>rhs</code> + <code>carry</code> and returns a tuple …\nCalculates <code>self</code> + <code>rhs</code> + <code>carry</code> and returns a tuple …\nCalculates <code>self</code> + <code>rhs</code> + <code>carry</code> and returns a tuple …\nCalculates <code>self</code> + <code>rhs</code> + <code>carry</code> and checks for overflow.\nCalculates <code>self</code> + <code>rhs</code> + <code>carry</code> and returns a tuple …\nCalculates the “full multiplication” <code>self * rhs + carry</code>\nCalculates the “full multiplication” <code>self * rhs + carry</code>\nCalculates the “full multiplication” <code>self * rhs + carry</code>\nCalculates the “full multiplication” <code>self * rhs + carry</code>\nCalculates the “full multiplication” <code>self * rhs + carry</code>\nCasts to a pointer of another type.\nCasts to a pointer of another type.\nChanges constness without changing the type.\nChanges constness without changing the type.\nReturns the bit pattern of <code>self</code> reinterpreted as a signed …\nReturns the bit pattern of <code>self</code> reinterpreted as a signed …\nReturns the bit pattern of <code>self</code> reinterpreted as a signed …\nReturns the bit pattern of <code>self</code> reinterpreted as a signed …\nReturns the bit pattern of <code>self</code> reinterpreted as a signed …\nReturns the bit pattern of <code>self</code> reinterpreted as a signed …\nReturns the bit pattern of <code>self</code> reinterpreted as an …\nReturns the bit pattern of <code>self</code> reinterpreted as an …\nReturns the bit pattern of <code>self</code> reinterpreted as an …\nReturns the bit pattern of <code>self</code> reinterpreted as an …\nReturns the bit pattern of <code>self</code> reinterpreted as an …\nReturns the bit pattern of <code>self</code> reinterpreted as an …\nReturns the cube root of a number.\nReturns the cube root of a number.\nReturns the smallest integer greater than or equal to <code>self</code>.\nReturns the smallest integer greater than or equal to <code>self</code>.\nFinds the closest <code>x</code> not below <code>index</code> where …\nShareable mutable containers.\nEvaluates boolean combinations of configuration flags at …\nA macro for defining <code>#[cfg]</code> match-like statements.\nA character type.\nUtilities for the <code>char</code> primitive type.\nReturns an iterator over the <code>char</code>s of a string slice, and …\nReturns an iterator over the <code>char</code>s of a string slice.\nChecked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…\nChecked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…\nChecked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…\nChecked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…\nChecked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…\nChecked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…\nChecked integer addition. Computes <code>self + rhs</code>, returning …\nChecked integer addition. Computes <code>self + rhs</code>, returning …\nChecked integer addition. Computes <code>self + rhs</code>, returning …\nChecked integer addition. Computes <code>self + rhs</code>, returning …\nChecked integer addition. Computes <code>self + rhs</code>, returning …\nChecked integer addition. Computes <code>self + rhs</code>, returning …\nChecked integer addition. Computes <code>self + rhs</code>, returning …\nChecked integer addition. Computes <code>self + rhs</code>, returning …\nChecked integer addition. Computes <code>self + rhs</code>, returning …\nChecked integer addition. Computes <code>self + rhs</code>, returning …\nChecked integer addition. Computes <code>self + rhs</code>, returning …\nChecked integer addition. Computes <code>self + rhs</code>, returning …\nChecked addition with a signed integer. Computes <code>self + rhs</code>…\nChecked addition with a signed integer. Computes <code>self + rhs</code>…\nChecked addition with a signed integer. Computes <code>self + rhs</code>…\nChecked addition with a signed integer. Computes <code>self + rhs</code>…\nChecked addition with a signed integer. Computes <code>self + rhs</code>…\nChecked addition with a signed integer. Computes <code>self + rhs</code>…\nChecked addition with an unsigned integer. Computes …\nChecked addition with an unsigned integer. Computes …\nChecked addition with an unsigned integer. Computes …\nChecked addition with an unsigned integer. Computes …\nChecked addition with an unsigned integer. Computes …\nChecked addition with an unsigned integer. Computes …\nChecked integer division. Computes <code>self / rhs</code>, returning …\nChecked integer division. Computes <code>self / rhs</code>, returning …\nChecked integer division. Computes <code>self / rhs</code>, returning …\nChecked integer division. Computes <code>self / rhs</code>, returning …\nChecked integer division. Computes <code>self / rhs</code>, returning …\nChecked integer division. Computes <code>self / rhs</code>, returning …\nChecked integer division. Computes <code>self / rhs</code>, returning …\nChecked integer division. Computes <code>self / rhs</code>, returning …\nChecked integer division. Computes <code>self / rhs</code>, returning …\nChecked integer division. Computes <code>self / rhs</code>, returning …\nChecked integer division. Computes <code>self / rhs</code>, returning …\nChecked integer division. Computes <code>self / rhs</code>, returning …\nChecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nChecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nChecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nChecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nChecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nChecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nChecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nChecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nChecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nChecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nChecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nChecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nReturns the logarithm of the number with respect to an …\nReturns the logarithm of the number with respect to an …\nReturns the logarithm of the number with respect to an …\nReturns the logarithm of the number with respect to an …\nReturns the logarithm of the number with respect to an …\nReturns the logarithm of the number with respect to an …\nReturns the logarithm of the number with respect to an …\nReturns the logarithm of the number with respect to an …\nReturns the logarithm of the number with respect to an …\nReturns the logarithm of the number with respect to an …\nReturns the logarithm of the number with respect to an …\nReturns the logarithm of the number with respect to an …\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nReturns the square root of the number, rounded down.\nReturns the square root of the number, rounded down.\nReturns the square root of the number, rounded down.\nReturns the square root of the number, rounded down.\nReturns the square root of the number, rounded down.\nReturns the square root of the number, rounded down.\nChecked integer multiplication. Computes <code>self * rhs</code>, …\nChecked integer multiplication. Computes <code>self * rhs</code>, …\nChecked integer multiplication. Computes <code>self * rhs</code>, …\nChecked integer multiplication. Computes <code>self * rhs</code>, …\nChecked integer multiplication. Computes <code>self * rhs</code>, …\nChecked integer multiplication. Computes <code>self * rhs</code>, …\nChecked integer multiplication. Computes <code>self * rhs</code>, …\nChecked integer multiplication. Computes <code>self * rhs</code>, …\nChecked integer multiplication. Computes <code>self * rhs</code>, …\nChecked integer multiplication. Computes <code>self * rhs</code>, …\nChecked integer multiplication. Computes <code>self * rhs</code>, …\nChecked integer multiplication. Computes <code>self * rhs</code>, …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> unless …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> unless …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> unless …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> unless …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> unless …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> unless …\nIf <code>rhs</code> is positive, calculates the smallest value greater …\nIf <code>rhs</code> is positive, calculates the smallest value greater …\nIf <code>rhs</code> is positive, calculates the smallest value greater …\nIf <code>rhs</code> is positive, calculates the smallest value greater …\nIf <code>rhs</code> is positive, calculates the smallest value greater …\nCalculates the smallest value greater than or equal to <code>self</code>…\nCalculates the smallest value greater than or equal to <code>self</code>…\nCalculates the smallest value greater than or equal to <code>self</code>…\nCalculates the smallest value greater than or equal to <code>self</code>…\nCalculates the smallest value greater than or equal to <code>self</code>…\nIf <code>rhs</code> is positive, calculates the smallest value greater …\nCalculates the smallest value greater than or equal to <code>self</code>…\nReturns the smallest power of two greater than or equal to …\nReturns the smallest power of two greater than or equal to …\nReturns the smallest power of two greater than or equal to …\nReturns the smallest power of two greater than or equal to …\nReturns the smallest power of two greater than or equal to …\nReturns the smallest power of two greater than or equal to …\nChecked exponentiation. Computes <code>self.pow(exp)</code>, returning …\nChecked exponentiation. Computes <code>self.pow(exp)</code>, returning …\nChecked exponentiation. Computes <code>self.pow(exp)</code>, returning …\nChecked exponentiation. Computes <code>self.pow(exp)</code>, returning …\nChecked exponentiation. Computes <code>self.pow(exp)</code>, returning …\nChecked exponentiation. Computes <code>self.pow(exp)</code>, returning …\nChecked exponentiation. Computes <code>self.pow(exp)</code>, returning …\nChecked exponentiation. Computes <code>self.pow(exp)</code>, returning …\nChecked exponentiation. Computes <code>self.pow(exp)</code>, returning …\nChecked exponentiation. Computes <code>self.pow(exp)</code>, returning …\nChecked exponentiation. Computes <code>self.pow(exp)</code>, returning …\nChecked exponentiation. Computes <code>self.pow(exp)</code>, returning …\nChecked integer remainder. Computes <code>self % rhs</code>, returning …\nChecked integer remainder. Computes <code>self % rhs</code>, returning …\nChecked integer remainder. Computes <code>self % rhs</code>, returning …\nChecked integer remainder. Computes <code>self % rhs</code>, returning …\nChecked integer remainder. Computes <code>self % rhs</code>, returning …\nChecked integer remainder. Computes <code>self % rhs</code>, returning …\nChecked integer remainder. Computes <code>self % rhs</code>, returning …\nChecked integer remainder. Computes <code>self % rhs</code>, returning …\nChecked integer remainder. Computes <code>self % rhs</code>, returning …\nChecked integer remainder. Computes <code>self % rhs</code>, returning …\nChecked integer remainder. Computes <code>self % rhs</code>, returning …\nChecked integer remainder. Computes <code>self % rhs</code>, returning …\nChecked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…\nChecked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…\nChecked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…\nChecked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…\nChecked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…\nChecked Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>, …\nChecked Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>, …\nChecked Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>, …\nChecked Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>, …\nChecked Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>, …\nChecked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…\nChecked Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>, …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nChecked integer subtraction. Computes <code>self - rhs</code>, …\nChecked integer subtraction. Computes <code>self - rhs</code>, …\nChecked integer subtraction. Computes <code>self - rhs</code>, …\nChecked integer subtraction. Computes <code>self - rhs</code>, …\nChecked integer subtraction. Computes <code>self - rhs</code>, …\nChecked integer subtraction. Computes <code>self - rhs</code>, returning\nChecked integer subtraction. Computes <code>self - rhs</code>, returning\nChecked integer subtraction. Computes <code>self - rhs</code>, returning\nChecked integer subtraction. Computes <code>self - rhs</code>, returning\nChecked integer subtraction. Computes <code>self - rhs</code>, returning\nChecked integer subtraction. Computes <code>self - rhs</code>, …\nChecked integer subtraction. Computes <code>self - rhs</code>, returning\nChecked subtraction with an unsigned integer. Computes …\nChecked subtraction with an unsigned integer. Computes …\nChecked subtraction with an unsigned integer. Computes …\nChecked subtraction with an unsigned integer. Computes …\nChecked subtraction with an unsigned integer. Computes …\nChecked subtraction with an unsigned integer. Computes …\nReturns an iterator over the slice producing …\nReturns an iterator over the slice producing …\nReturns an iterator over <code>chunk_size</code> elements of the slice …\nReturns an iterator over <code>chunk_size</code> elements of the slice …\nReturns an iterator over <code>chunk_size</code> elements of the slice …\nReturns an iterator over <code>chunk_size</code> elements of the slice …\nRestrict a value to a certain interval unless it is NaN.\nRestrict a value to a certain interval unless it is NaN.\nReturns the floating point category of the number. If only …\nReturns the floating point category of the number. If only …\nThe <code>Clone</code> trait for types that cannot be ‘implicitly …\nCopies the elements from <code>src</code> into <code>self</code>.\nUtilities for comparing and ordering values.\nCollection types.\nExpands to the column number at which it was invoked.\nCauses compilation to fail with the given error message …\nFlattens a slice of <code>T</code> into a single value <code>Self::Output</code>.\nConcatenates literals into a static string slice.\nConcatenates literals into a byte slice.\nConcatenates identifiers into one identifier.\nFlattens a slice of <code>T</code> into a single value <code>Self::Output</code>, …\nCompile-time constants, compile-time evaluable functions, …\nSame as <code>format_args</code>, but can be used in some const …\nReturns <code>true</code> if the slice contains an element with the …\nReturns <code>true</code> if the given pattern matches a sub-slice of …\nSkip to the next iteration of a loop.\nTraits for conversions between types.\nCopies <code>count * size_of&lt;T&gt;</code> bytes from <code>src</code> to <code>self</code>. The …\nCopies <code>count * size_of&lt;T&gt;</code> bytes from <code>src</code> to <code>self</code>. The …\nCopies all elements from <code>src</code> into <code>self</code>, using a memcpy.\nCopies <code>count * size_of&lt;T&gt;</code> bytes from <code>self</code> to <code>dest</code>. The …\nCopies <code>count * size_of&lt;T&gt;</code> bytes from <code>self</code> to <code>dest</code>. The …\nCopies <code>count * size_of&lt;T&gt;</code> bytes from <code>self</code> to <code>dest</code>. The …\nCopies <code>count * size_of&lt;T&gt;</code> bytes from <code>self</code> to <code>dest</code>. The …\nCopies elements from one part of the slice to another part …\nReturns a number composed of the magnitude of <code>self</code> and the …\nReturns a number composed of the magnitude of <code>self</code> and the …\nComputes the cosine of a number (in radians).\nComputes the cosine of a number (in radians).\nHyperbolic cosine function.\nHyperbolic cosine function.\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nA Rust binary or library.\nPrints and returns the value of a given expression for …\nAsserts that a boolean expression is <code>true</code> at runtime.\nAsserts that two expressions are equal to each other.\nAsserts that two expressions are not equal to each other.\nCreates an iterator over the UTF-16 encoded code points in …\nThe <code>Default</code> trait for types with a default value.\nReturns the default value of <code>false</code>\nReturns the default value of <code>\\x00</code>\nReturns the default value of <code>()</code>\nCreates an empty slice.\nCreates a mutable empty slice.\nCreates an empty mutable str\nCreates an empty str\nReturns the default value of <code>0.0</code>\nReturns the default value of <code>0.0</code>\nReturns the default value of <code>0.0</code>\nReturns the default value of <code>0.0</code>\nReturns the default value of <code>0</code>\nReturns the default value of <code>0</code>\nReturns the default value of <code>0</code>\nReturns the default value of <code>0</code>\nReturns the default value of <code>0</code>\nReturns the default value of <code>0</code>\nReturns the default value of <code>0</code>\nReturns the default value of <code>0</code>\nReturns the default value of <code>0</code>\nReturns the default value of <code>0</code>\nReturns the default value of <code>0</code>\nReturns the default value of <code>0</code>\nThis operation rounds towards zero, truncating any …\nThis operation rounds towards zero, truncating any …\nThis operation rounds towards zero, truncating any …\nThis operation rounds towards zero, truncating any …\nThis operation rounds towards zero, truncating any …\nThis operation rounds towards zero, truncating any …\nThis operation rounds towards zero, truncating any …\nThis operation rounds towards zero, truncating any …\nThis operation rounds towards zero, truncating any …\nThis operation rounds towards zero, truncating any …\nThis operation rounds towards zero, truncating any …\nThis operation rounds towards zero, truncating any …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nCalculates Euclidean division, the matching method for …\nCalculates Euclidean division, the matching method for …\nCalculates the quotient of Euclidean division of <code>self</code> by …\nCalculates the quotient of Euclidean division of <code>self</code> by …\nCalculates the quotient of Euclidean division of <code>self</code> by …\nCalculates the quotient of Euclidean division of <code>self</code> by …\nCalculates the quotient of Euclidean division of <code>self</code> by …\nPerforms Euclidean division.\nPerforms Euclidean division.\nPerforms Euclidean division.\nPerforms Euclidean division.\nPerforms Euclidean division.\nCalculates the quotient of Euclidean division of <code>self</code> by …\nPerforms Euclidean division.\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nExecutes the destructor (if any) of the pointed-to value.\n<code>dyn</code> is a prefix of a trait object’s type.\nBorrows each element mutably and returns an array of …\nBorrows each element and returns an array of references …\nWhat expression to evaluate when an <code>if</code> condition evaluates …\nEncodes this character as UTF-16 into the provided <code>u16</code> …\nReturns an iterator of <code>u16</code> over the string encoded as …\nEncodes this character as UTF-8 into the provided byte …\nReturns <code>true</code> if <code>needle</code> is a suffix of the slice or equal …\nReturns <code>true</code> if the given pattern matches a suffix of this …\nA type that can be any one of several variants.\nInspection and manipulation of the process’s environment.\nInspects an environment variable at compile time.\nPrints to the standard error.\nPrints to the standard error, with a newline.\nChecks that two values are an ASCII case-insensitive match.\nChecks that two slices are an ASCII case-insensitive match.\nChecks that two strings are an ASCII case-insensitive …\nChecks that two values are an ASCII case-insensitive match.\nInterfaces for working with Errors.\nReturns an iterator that produces an escaped version of …\nReturns an iterator that produces an escaped version of a …\nReturns an iterator that yields the literal escape code of …\nReturn an iterator that escapes each char in <code>self</code> with …\nReturns an iterator that yields the literal escape code of …\nReturn an iterator that escapes each char in <code>self</code> with …\nReturns an iterator that yields the hexadecimal Unicode …\nReturn an iterator that escapes each char in <code>self</code> with …\nReturns <code>e^(self)</code>, (the exponential function).\nReturns <code>e^(self)</code>, (the exponential function).\nReturns <code>2^(self)</code>.\nReturns <code>2^(self)</code>.\nReturns <code>e^(self) - 1</code> in a way that is accurate even if the …\nReturns <code>e^(self) - 1</code> in a way that is accurate even if the …\nExposes the “provenance” part of the pointer for …\nExposes the “provenance” part of the pointer for …\nAllows to <code>extend</code> a tuple of collections that also …\nLink to or import external code.\nA 128-bit floating point type (specifically, the “…\nConstants for the <code>f128</code> double-precision floating point …\nA 16-bit floating point type (specifically, the “binary16…\nConstants for the <code>f16</code> double-precision floating point type.\nA 32-bit floating point type (specifically, the “binary32…\nConstants for the <code>f32</code> single-precision floating point type.\nA 64-bit floating point type (specifically, the “binary64…\nConstants for the <code>f64</code> double-precision floating point type.\nA value of type <code>bool</code> representing logical <strong>false</strong>.\nUtilities related to FFI bindings.\nExpands to the file name in which it was invoked.\nFills <code>self</code> with elements by cloning <code>value</code>.\nFills <code>self</code> with elements returned by calling a closure …\nReturns the byte index of the first character of this …\nReturns the first element of the slice, or <code>None</code> if it is …\nReturn an array reference to the first <code>N</code> items in the …\nReturn a mutable array reference to the first <code>N</code> items in …\nReturns a mutable pointer to the first element of the …\nReturns the largest integer less than or equal to <code>self</code>.\nReturns the largest integer less than or equal to <code>self</code>.\nFinds the closest <code>x</code> not exceeding <code>index</code> where …\nUtilities for formatting and printing <code>String</code>s.\nA function or function pointer.\nFunction pointers, like <code>fn(usize) -&gt; bool</code>.\nIteration with <code>in</code>, trait implementation with <code>impl</code>, or …\nCreates a <code>String</code> using interpolation of runtime …\nConstructs parameters for the other string-formatting …\nSame as <code>format_args</code>, but adds a newline in the end.\nReturns the fractional part of <code>self</code>.\nReturns the fractional part of <code>self</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>u8</code> into a <code>char</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts <code>i8</code> to <code>f32</code> losslessly.\nConverts <code>u16</code> to <code>f32</code> losslessly.\nConverts <code>u8</code> to <code>f32</code> losslessly.\nConverts <code>i16</code> to <code>f32</code> losslessly.\nConverts a <code>bool</code> to <code>f32</code> losslessly. The resulting value is …\nConverts <code>u32</code> to <code>f64</code> losslessly.\nConverts <code>u8</code> to <code>f64</code> losslessly.\nReturns the argument unchanged.\nConverts a <code>bool</code> to <code>f64</code> losslessly. The resulting value is …\nConverts <code>f32</code> to <code>f64</code> losslessly.\nConverts <code>u16</code> to <code>f64</code> losslessly.\nConverts <code>i32</code> to <code>f64</code> losslessly.\nConverts <code>i16</code> to <code>f64</code> losslessly.\nConverts <code>f16</code> to <code>f64</code> losslessly.\nConverts <code>i8</code> to <code>f64</code> losslessly.\nConverts <code>f32</code> to <code>f128</code> losslessly.\nReturns the argument unchanged.\nConverts <code>f16</code> to <code>f128</code> losslessly.\nConverts <code>f64</code> to <code>f128</code> losslessly.\nReturns the argument unchanged.\nConverts a <code>bool</code> to <code>i8</code> losslessly. The resulting value is <code>0</code> …\nConverts a <code>bool</code> to <code>i16</code> losslessly. The resulting value is <code>0</code>…\nConverts <code>u8</code> to <code>i16</code> losslessly.\nReturns the argument unchanged.\nConverts <code>i8</code> to <code>i16</code> losslessly.\nConverts <code>u16</code> to <code>i32</code> losslessly.\nReturns the argument unchanged.\nConverts <code>u8</code> to <code>i32</code> losslessly.\nConverts <code>i16</code> to <code>i32</code> losslessly.\nConverts a <code>bool</code> to <code>i32</code> losslessly. The resulting value is <code>0</code>…\nConverts <code>i8</code> to <code>i32</code> losslessly.\nConverts <code>u8</code> to <code>i64</code> losslessly.\nReturns the argument unchanged.\nConverts <code>i32</code> to <code>i64</code> losslessly.\nConverts a <code>bool</code> to <code>i64</code> losslessly. The resulting value is <code>0</code>…\nConverts <code>u32</code> to <code>i64</code> losslessly.\nConverts <code>u16</code> to <code>i64</code> losslessly.\nConverts <code>i8</code> to <code>i64</code> losslessly.\nConverts <code>i16</code> to <code>i64</code> losslessly.\nConverts a <code>bool</code> to <code>i128</code> losslessly. The resulting value is …\nReturns the argument unchanged.\nConverts <code>i8</code> to <code>i128</code> losslessly.\nConverts <code>i16</code> to <code>i128</code> losslessly.\nConverts <code>i64</code> to <code>i128</code> losslessly.\nConverts <code>u16</code> to <code>i128</code> losslessly.\nConverts <code>u32</code> to <code>i128</code> losslessly.\nConverts <code>i32</code> to <code>i128</code> losslessly.\nConverts <code>u8</code> to <code>i128</code> losslessly.\nConverts <code>u64</code> to <code>i128</code> losslessly.\nConverts a <code>bool</code> to <code>u8</code> losslessly. The resulting value is <code>0</code> …\nReturns the argument unchanged.\nConverts a <code>bool</code> to <code>u16</code> losslessly. The resulting value is <code>0</code>…\nConverts <code>u8</code> to <code>u16</code> losslessly.\nReturns the argument unchanged.\nUses <code>Ipv4Addr::to_bits</code> to convert an IPv4 address to a …\nConverts <code>u8</code> to <code>u32</code> losslessly.\nReturns the argument unchanged.\nConverts a <code>char</code> into a <code>u32</code>.\nConverts a <code>bool</code> to <code>u32</code> losslessly. The resulting value is <code>0</code>…\nConverts <code>u16</code> to <code>u32</code> losslessly.\nReturns the argument unchanged.\nConverts a <code>bool</code> to <code>u64</code> losslessly. The resulting value is <code>0</code>…\nConverts <code>u8</code> to <code>u64</code> losslessly.\nConverts <code>u16</code> to <code>u64</code> losslessly.\nConverts a <code>char</code> into a <code>u64</code>.\nConverts <code>u32</code> to <code>u64</code> losslessly.\nConverts a <code>bool</code> to <code>u128</code> losslessly. The resulting value is …\nConverts <code>u8</code> to <code>u128</code> losslessly.\nUses <code>Ipv6Addr::to_bits</code> to convert an IPv6 address to a …\nConverts <code>u32</code> to <code>u128</code> losslessly.\nConverts <code>u16</code> to <code>u128</code> losslessly.\nConverts a <code>char</code> into a <code>u128</code>.\nReturns the argument unchanged.\nConverts <code>u64</code> to <code>u128</code> losslessly.\nReturns the argument unchanged.\nConverts <code>i8</code> to <code>isize</code> losslessly.\nConverts <code>u8</code> to <code>isize</code> losslessly.\nConverts <code>i16</code> to <code>isize</code> losslessly.\nConverts a <code>bool</code> to <code>isize</code> losslessly. The resulting value …\nConverts <code>u8</code> to <code>usize</code> losslessly.\nConverts <code>u16</code> to <code>usize</code> losslessly.\nConverts a <code>bool</code> to <code>usize</code> losslessly. The resulting value …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nCreate a floating point value from its representation as a …\nCreate a floating point value from its representation as a …\nCreate an integer value from its representation as a byte …\nCreate an integer value from its representation as a byte …\nCreate an integer value from its representation as a byte …\nCreate an integer value from its representation as a byte …\nCreate an integer value from its representation as a byte …\nCreate a native endian integer value from its …\nCreate a native endian integer value from its …\nCreate a native endian integer value from its …\nCreate a native endian integer value from its …\nCreate a native endian integer value from its …\nCreate an integer value from its representation as a byte …\nCreate a native endian integer value from its …\nCreates a pointer from its raw bits.\nCreates a pointer from its raw bits.\nRaw transmutation from <code>u16</code>.\nRaw transmutation from <code>u32</code>.\nRaw transmutation from <code>u64</code>.\nRaw transmutation from <code>u128</code>.\nConverts a digit in the given radix to a <code>char</code>.\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nCreate a floating point value from its representation as a …\nCreate a floating point value from its representation as a …\nCreate an integer value from its representation as a byte …\nCreate an integer value from its representation as a byte …\nCreate an integer value from its representation as a byte …\nCreate an integer value from its representation as a byte …\nCreate an integer value from its representation as a byte …\nCreate a native endian integer value from its …\nCreate a native endian integer value from its …\nCreate a native endian integer value from its …\nCreate a native endian integer value from its …\nCreate a native endian integer value from its …\nCreate an integer value from its representation as a byte …\nCreate a native endian integer value from its …\nCreate a floating point value from its representation as a …\nCreate a floating point value from its representation as a …\nCreate an integer value from its memory representation as …\nCreate an integer value from its memory representation as …\nCreate an integer value from its memory representation as …\nCreate an integer value from its memory representation as …\nCreate an integer value from its memory representation as …\nCreate a native endian integer value from its memory …\nCreate a native endian integer value from its memory …\nCreate a native endian integer value from its memory …\nCreate a native endian integer value from its memory …\nCreate a native endian integer value from its memory …\nCreate an integer value from its memory representation as …\nCreate a native endian integer value from its memory …\nParse a <code>bool</code> from a string.\nConverts a string in base 10 to a float. Accepts an …\nConverts a string in base 10 to a float. Accepts an …\nConverts a string slice in a given base to an integer.\nConverts a string slice in a given base to an integer.\nConverts a string slice in a given base to an integer.\nConverts a string slice in a given base to an integer.\nConverts a string slice in a given base to an integer.\nConverts a string slice in a given base to an integer.\nConverts a string slice in a given base to an integer.\nConverts a string slice in a given base to an integer.\nConverts a string slice in a given base to an integer.\nConverts a string slice in a given base to an integer.\nConverts a string slice in a given base to an integer.\nConverts a string slice in a given base to an integer.\nConverts a <code>u32</code> to a <code>char</code>.\nConverts a <code>u32</code> to a <code>char</code>, ignoring validity.\nFilesystem manipulation operations.\nAsynchronous basic functionality.\nGamma function.\nGamma function.\nReturns a reference to an element or subslice depending on …\nReturns a subslice of <code>str</code>.\nReturns mutable references to many indices at once.\nReturns mutable references to many indices at once, …\nReturns a mutable reference to an element or subslice …\nReturns a mutable subslice of <code>str</code>.\nReturns a raw pointer to an element or subslice, without …\nReturns a reference to an element or subslice, without …\nReturns an unchecked subslice of <code>str</code>.\nReturns a raw pointer to an element or subslice, without …\nReturns a mutable reference to an element or subslice, …\nReturns a mutable, unchecked subslice of <code>str</code>.\nReturns whether two pointers are guaranteed to be equal.\nReturns whether two pointers are guaranteed to be equal.\nReturns whether two pointers are guaranteed to be inequal.\nReturns whether two pointers are guaranteed to be inequal.\nGeneric hashing support.\nHints to compiler that affects how code should be emitted …\nCompute the distance between the origin and a point (<code>x</code>, <code>y</code>) …\nCompute the distance between the origin and a point (<code>x</code>, <code>y</code>) …\nThe 128-bit signed integer type.\nRedundant constants module for the <code>i128</code> primitive type.\nThe 16-bit signed integer type.\nRedundant constants module for the <code>i16</code> primitive type.\nThe 32-bit signed integer type.\nRedundant constants module for the <code>i32</code> primitive type.\nThe 64-bit signed integer type.\nRedundant constants module for the <code>i64</code> primitive type.\nThe 8-bit signed integer type.\nRedundant constants module for the <code>i8</code> primitive type.\nEvaluate a block if a condition holds.\nReturns the logarithm of the number with respect to an …\nReturns the logarithm of the number with respect to an …\nReturns the logarithm of the number with respect to an …\nReturns the logarithm of the number with respect to an …\nReturns the logarithm of the number with respect to an …\nReturns the logarithm of the number with respect to an …\nReturns the logarithm of the number with respect to an …\nReturns the logarithm of the number with respect to an …\nReturns the logarithm of the number with respect to an …\nReturns the logarithm of the number with respect to an …\nReturns the logarithm of the number with respect to an …\nReturns the logarithm of the number with respect to an …\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nImplement some functionality for a type.\nIterate over a series of values with <code>for</code>.\nParses a file as an expression or an item according to the …\nIncludes a file as a reference to a byte array.\nIncludes a UTF-8 encoded file as a string.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code> without copying or …\nCreates a consuming iterator, that is, one that moves each …\nConverts a <code>Box&lt;str&gt;</code> into a <code>String</code> without copying or …\nConverts <code>self</code> into a vector without clones or allocation.\nCompiler intrinsics.\nTraits, helpers, and type definitions for core I/O …\nReturns whether the pointer is properly aligned for <code>T</code>.\nReturns whether the pointer is properly aligned for <code>T</code>.\nReturns whether the pointer is aligned to <code>align</code>.\nReturns whether the pointer is aligned to <code>align</code>.\nReturns <code>true</code> if this <code>char</code> has the <code>Alphabetic</code> property.\nReturns <code>true</code> if this <code>char</code> satisfies either <code>is_alphabetic()</code> …\nChecks if the value is within the ASCII range.\nChecks if all bytes in this slice are within the ASCII …\nChecks if all characters in this string are within the …\nChecks if the value is within the ASCII range.\nChecks if the value is an ASCII alphabetic character:\nChecks if the value is an ASCII alphabetic character:\nChecks if the value is an ASCII alphanumeric character:\nChecks if the value is an ASCII alphanumeric character:\nChecks if the value is an ASCII control character: U+0000 …\nChecks if the value is an ASCII control character: U+0000 …\nChecks if the value is an ASCII decimal digit: U+0030 ‘0…\nChecks if the value is an ASCII decimal digit: U+0030 ‘0…\nChecks if the value is an ASCII graphic character: U+0021 …\nChecks if the value is an ASCII graphic character: U+0021 …\nChecks if the value is an ASCII hexadecimal digit:\nChecks if the value is an ASCII hexadecimal digit:\nChecks if the value is an ASCII lowercase character: …\nChecks if the value is an ASCII lowercase character: …\nChecks if the value is an ASCII octal digit: U+0030 ‘0’…\nChecks if the value is an ASCII octal digit: U+0030 ‘0’…\nChecks if the value is an ASCII punctuation character:\nChecks if the value is an ASCII punctuation character:\nChecks if the value is an ASCII uppercase character: …\nChecks if the value is an ASCII uppercase character: …\nChecks if the value is an ASCII whitespace character: …\nChecks if the value is an ASCII whitespace character: …\nChecks that <code>index</code>-th byte is the first byte in a UTF-8 …\nChecks whether the pattern matches anywhere in the haystack\nReturns <code>true</code> if this <code>char</code> has the general category for …\nChecks if a <code>char</code> is a digit in the given radix.\nReturns <code>true</code> if the raw slice has a length of 0.\nReturns <code>true</code> if the raw slice has a length of 0.\nReturns <code>true</code> if the slice has a length of 0.\nReturns <code>true</code> if <code>self</code> has a length of zero bytes.\nReturns <code>true</code> if this number is neither infinite nor NaN.\nReturns <code>true</code> if this number is neither infinite nor NaN.\nReturns <code>true</code> if this value is positive infinity or …\nReturns <code>true</code> if this value is positive infinity or …\nReturns <code>true</code> if this <code>char</code> has the <code>Lowercase</code> property.\nReturns <code>true</code> if this value is NaN.\nReturns <code>true</code> if this value is NaN.\nReturns <code>true</code> if this value is NaN.\nReturns <code>true</code> if this value is NaN.\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns <code>true</code> if the number is neither zero, infinite, …\nReturns <code>true</code> if the number is neither zero, infinite, …\nReturns <code>true</code> if the pointer is null.\nReturns <code>true</code> if the pointer is null.\nReturns <code>true</code> if this <code>char</code> has one of the general …\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.\nReturns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.\nReturns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.\nReturns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.\nReturns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.\nReturns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.\nChecks whether the pattern matches at the front of the …\nReturns <code>true</code> if <code>self</code> has a negative sign, including <code>-0.0</code>, …\nReturns <code>true</code> if <code>self</code> has a negative sign, including <code>-0.0</code>, …\nReturns <code>true</code> if <code>self</code> has a negative sign, including <code>-0.0</code>, …\nReturns <code>true</code> if <code>self</code> has a negative sign, including <code>-0.0</code>, …\nReturns <code>true</code> if <code>self</code> has a positive sign, including <code>+0.0</code>, …\nReturns <code>true</code> if <code>self</code> has a positive sign, including <code>+0.0</code>, …\nReturns <code>true</code> if <code>self</code> has a positive sign, including <code>+0.0</code>, …\nReturns <code>true</code> if <code>self</code> has a positive sign, including <code>+0.0</code>, …\nChecks if the elements of this slice are sorted.\nChecks if the elements of this slice are sorted using the …\nChecks if the elements of this slice are sorted using the …\nReturns <code>true</code> if the number is subnormal.\nReturns <code>true</code> if the number is subnormal.\nChecks whether the pattern matches at the back of the …\nReturns <code>true</code> if this <code>char</code> has the <code>Uppercase</code> property.\nChecks if the value is a Unicode surrogate code point, …\nReturns <code>true</code> if this <code>char</code> has the <code>White_Space</code> property.\nA macro to test at <em>runtime</em> whether a CPU feature is …\nThe pointer-sized signed integer type.\nRedundant constants module for the <code>isize</code> primitive type.\nReturns the square root of the number, rounded down.\nReturns the square root of the number, rounded down.\nReturns the square root of the number, rounded down.\nReturns the square root of the number, rounded down.\nReturns the square root of the number, rounded down.\nReturns the square root of the number, rounded down.\nReturns the square root of the number, rounded down.\nReturns the square root of the number, rounded down.\nReturns the square root of the number, rounded down.\nReturns the square root of the number, rounded down.\nReturns the square root of the number, rounded down.\nReturns the square root of the number, rounded down.\nComposable external iteration.\nReturns an iterator over the slice.\nReturns an iterator that allows modifying each value.\nFlattens a slice of <code>T</code> into a single value <code>Self::Output</code>, …\nReturns the last element of the slice, or <code>None</code> if it is …\nReturn an array reference to the last <code>N</code> items in the slice.\nReturn a mutable array reference to the last <code>N</code> items in …\nReturns a mutable reference to the last item in the slice, …\nReturns the number of leading ones in the binary …\nReturns the number of leading ones in the binary …\nReturns the number of leading ones in the binary …\nReturns the number of leading ones in the binary …\nReturns the number of leading ones in the binary …\nReturns the number of leading ones in the binary …\nReturns the number of leading ones in the binary …\nReturns the number of leading ones in the binary …\nReturns the number of leading ones in the binary …\nReturns the number of leading ones in the binary …\nReturns the number of leading ones in the binary …\nReturns the number of leading ones in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the length of a raw slice.\nReturns the length of a raw slice.\nReturns the number of elements in the slice.\nReturns the length of <code>self</code>.\nReturns the number of 16-bit code units this <code>char</code> would …\nReturns the number of bytes this <code>char</code> would need if …\nBind a value to a variable.\nExpands to the line number on which it was invoked.\nAn iterator over the lines of a string, as string slices.\nAn iterator over the lines of a string.\nReturns the natural logarithm of the number.\nReturns the natural logarithm of the number.\nReturns <code>ln(1+n)</code> (natural logarithm) more accurately than if\nReturns <code>ln(1+n)</code> (natural logarithm) more accurately than if\nNatural logarithm of the absolute value of the gamma …\nNatural logarithm of the absolute value of the gamma …\nReturns the logarithm of the number with respect to an …\nReturns the logarithm of the number with respect to an …\nReturns the base 10 logarithm of the number.\nReturns the base 10 logarithm of the number.\nReturns the base 2 logarithm of the number.\nReturns the base 2 logarithm of the number.\nPrints passed tokens into the standard output.\nLoop indefinitely.\nConverts this type to its ASCII lower case equivalent …\nConverts this slice to its ASCII lower case equivalent …\nConverts this string to its ASCII lower case equivalent …\nConverts this value to its ASCII lower case equivalent …\nConverts this type to its ASCII upper case equivalent …\nConverts this slice to its ASCII upper case equivalent …\nConverts this string to its ASCII upper case equivalent …\nConverts this value to its ASCII upper case equivalent …\nReturns an array of the same size as <code>self</code>, with function <code>f</code> …\nCreates a new pointer by mapping <code>self</code>’s address to a new …\nCreates a new pointer by mapping <code>self</code>’s address to a new …\nPrimitive traits and types representing basic properties …\nMasks out bits of the pointer according to a mask.\nMasks out bits of the pointer according to a mask.\nControl flow based on pattern matching.\nAn iterator over the disjoint matches of a pattern within …\nAn iterator over the disjoint matches of a pattern within …\nReturns whether the given expression matches the provided …\nReturns the maximum of the two numbers, ignoring NaN.\nReturns the maximum of the two numbers, ignoring NaN.\nNew code should prefer to use <code>i8::MAX</code> instead.\nNew code should prefer to use <code>i16::MAX</code> instead.\nNew code should prefer to use <code>i32::MAX</code> instead.\nNew code should prefer to use <code>i64::MAX</code> instead.\nNew code should prefer to use <code>i128::MAX</code> instead.\nNew code should prefer to use <code>u8::MAX</code> instead.\nNew code should prefer to use <code>u16::MAX</code> instead.\nNew code should prefer to use <code>u32::MAX</code> instead.\nNew code should prefer to use <code>u64::MAX</code> instead.\nNew code should prefer to use <code>u128::MAX</code> instead.\nNew code should prefer to use <code>isize::MAX</code> instead.\nNew code should prefer to use <code>usize::MAX</code> instead.\nReturns the maximum of the two numbers, propagating NaN.\nReturns the maximum of the two numbers, propagating NaN.\nBasic functions for dealing with memory.\nCalculates the middle point of <code>self</code> and <code>rhs</code>.\nCalculates the middle point of <code>self</code> and <code>rhs</code>.\nCalculates the middle point of <code>self</code> and <code>rhs</code>.\nCalculates the middle point of <code>self</code> and <code>rhs</code>.\nCalculates the middle point of <code>self</code> and <code>rhs</code>.\nCalculates the middle point of <code>self</code> and <code>rhs</code>.\nCalculates the middle point of <code>self</code> and <code>rhs</code>.\nCalculates the middle point of <code>self</code> and <code>rhs</code>.\nCalculates the middle point of <code>self</code> and <code>rhs</code>.\nCalculates the middle point of <code>self</code> and <code>rhs</code>.\nCalculates the middle point of <code>self</code> and <code>rhs</code>.\nCalculates the middle point of <code>self</code> and <code>rhs</code>.\nCalculates the middle point of <code>self</code> and <code>rhs</code>.\nCalculates the middle point of <code>self</code> and <code>rhs</code>.\nReturns the minimum of the two numbers, ignoring NaN.\nReturns the minimum of the two numbers, ignoring NaN.\nNew code should prefer to use <code>i8::MIN</code> instead.\nNew code should prefer to use <code>i16::MIN</code> instead.\nNew code should prefer to use <code>i32::MIN</code> instead.\nNew code should prefer to use <code>i64::MIN</code> instead.\nNew code should prefer to use <code>i128::MIN</code> instead.\nNew code should prefer to use <code>u8::MIN</code> instead.\nNew code should prefer to use <code>u16::MIN</code> instead.\nNew code should prefer to use <code>u32::MIN</code> instead.\nNew code should prefer to use <code>u64::MIN</code> instead.\nNew code should prefer to use <code>u128::MIN</code> instead.\nNew code should prefer to use <code>isize::MIN</code> instead.\nNew code should prefer to use <code>usize::MIN</code> instead.\nReturns the minimum of the two numbers, propagating NaN.\nReturns the minimum of the two numbers, propagating NaN.\nOrganize code into modules.\nExpands to a string that represents the current module …\nCapture a closure’s environment by value.\nFused multiply-add. Computes <code>(self * a) + b</code> with only one …\nFused multiply-add. Computes <code>(self * a) + b</code> with only one …\nA mutable variable, reference, or pointer.\nNetworking primitives for TCP/UDP communication.\nThe <code>!</code> type, also called “never”.\nReturns the greatest number less than <code>self</code>.\nReturns the greatest number less than <code>self</code>.\nIf <code>rhs</code> is positive, calculates the smallest value greater …\nIf <code>rhs</code> is positive, calculates the smallest value greater …\nIf <code>rhs</code> is positive, calculates the smallest value greater …\nIf <code>rhs</code> is positive, calculates the smallest value greater …\nIf <code>rhs</code> is positive, calculates the smallest value greater …\nCalculates the smallest value greater than or equal to <code>self</code>…\nCalculates the smallest value greater than or equal to <code>self</code>…\nCalculates the smallest value greater than or equal to <code>self</code>…\nCalculates the smallest value greater than or equal to <code>self</code>…\nCalculates the smallest value greater than or equal to <code>self</code>…\nIf <code>rhs</code> is positive, calculates the smallest value greater …\nCalculates the smallest value greater than or equal to <code>self</code>…\nReturns the smallest power of two greater than or equal to …\nReturns the smallest power of two greater than or equal to …\nReturns the smallest power of two greater than or equal to …\nReturns the smallest power of two greater than or equal to …\nReturns the smallest power of two greater than or equal to …\nReturns the smallest power of two greater than or equal to …\nReturns the least number greater than <code>self</code>.\nReturns the least number greater than <code>self</code>.\nAdditional functionality for numerics.\nCalculates the offset from a pointer.\nCalculates the offset from a pointer.\nCalculates the distance between two pointers. The returned …\nCalculates the distance between two pointers. The returned …\nOverloadable operators.\nOptional values.\nOptionally inspects an environment variable at compile …\nOS-specific functionality.\nComputes the absolute value of <code>self</code>.\nComputes the absolute value of <code>self</code>.\nComputes the absolute value of <code>self</code>.\nComputes the absolute value of <code>self</code>.\nComputes the absolute value of <code>self</code>.\nComputes the absolute value of <code>self</code>.\nCalculates <code>self</code> + <code>rhs</code>\nCalculates <code>self</code> + <code>rhs</code>\nCalculates <code>self</code> + <code>rhs</code>\nCalculates <code>self</code> + <code>rhs</code>\nCalculates <code>self</code> + <code>rhs</code>\nCalculates <code>self</code> + <code>rhs</code>\nCalculates <code>self</code> + <code>rhs</code>\nCalculates <code>self</code> + <code>rhs</code>\nCalculates <code>self</code> + <code>rhs</code>\nCalculates <code>self</code> + <code>rhs</code>\nCalculates <code>self</code> + <code>rhs</code>\nCalculates <code>self</code> + <code>rhs</code>\nCalculates <code>self</code> + <code>rhs</code> with a signed <code>rhs</code>\nCalculates <code>self</code> + <code>rhs</code> with a signed <code>rhs</code>\nCalculates <code>self</code> + <code>rhs</code> with a signed <code>rhs</code>\nCalculates <code>self</code> + <code>rhs</code> with a signed <code>rhs</code>\nCalculates <code>self</code> + <code>rhs</code> with a signed <code>rhs</code>\nCalculates <code>self</code> + <code>rhs</code> with a signed <code>rhs</code>\nCalculates <code>self</code> + <code>rhs</code> with an unsigned <code>rhs</code>\nCalculates <code>self</code> + <code>rhs</code> with an unsigned <code>rhs</code>\nCalculates <code>self</code> + <code>rhs</code> with an unsigned <code>rhs</code>\nCalculates <code>self</code> + <code>rhs</code> with an unsigned <code>rhs</code>\nCalculates <code>self</code> + <code>rhs</code> with an unsigned <code>rhs</code>\nCalculates <code>self</code> + <code>rhs</code> with an unsigned <code>rhs</code>\nCalculates the divisor when <code>self</code> is divided by <code>rhs</code>.\nCalculates the divisor when <code>self</code> is divided by <code>rhs</code>.\nCalculates the divisor when <code>self</code> is divided by <code>rhs</code>.\nCalculates the divisor when <code>self</code> is divided by <code>rhs</code>.\nCalculates the divisor when <code>self</code> is divided by <code>rhs</code>.\nCalculates the divisor when <code>self</code> is divided by <code>rhs</code>.\nCalculates the divisor when <code>self</code> is divided by <code>rhs</code>.\nCalculates the divisor when <code>self</code> is divided by <code>rhs</code>.\nCalculates the divisor when <code>self</code> is divided by <code>rhs</code>.\nCalculates the divisor when <code>self</code> is divided by <code>rhs</code>.\nCalculates the divisor when <code>self</code> is divided by <code>rhs</code>.\nCalculates the divisor when <code>self</code> is divided by <code>rhs</code>.\nCalculates the quotient of Euclidean division …\nCalculates the quotient of Euclidean division …\nCalculates the quotient of Euclidean division …\nCalculates the quotient of Euclidean division …\nCalculates the quotient of Euclidean division …\nCalculates the quotient of Euclidean division …\nCalculates the quotient of Euclidean division …\nCalculates the quotient of Euclidean division …\nCalculates the quotient of Euclidean division …\nCalculates the quotient of Euclidean division …\nCalculates the quotient of Euclidean division …\nCalculates the quotient of Euclidean division …\nCalculates the multiplication of <code>self</code> and <code>rhs</code>.\nCalculates the multiplication of <code>self</code> and <code>rhs</code>.\nCalculates the multiplication of <code>self</code> and <code>rhs</code>.\nCalculates the multiplication of <code>self</code> and <code>rhs</code>.\nCalculates the multiplication of <code>self</code> and <code>rhs</code>.\nCalculates the multiplication of <code>self</code> and <code>rhs</code>.\nCalculates the multiplication of <code>self</code> and <code>rhs</code>.\nCalculates the multiplication of <code>self</code> and <code>rhs</code>.\nCalculates the multiplication of <code>self</code> and <code>rhs</code>.\nCalculates the multiplication of <code>self</code> and <code>rhs</code>.\nCalculates the multiplication of <code>self</code> and <code>rhs</code>.\nCalculates the multiplication of <code>self</code> and <code>rhs</code>.\nNegates self, overflowing if this is equal to the minimum …\nNegates self, overflowing if this is equal to the minimum …\nNegates self, overflowing if this is equal to the minimum …\nNegates self, overflowing if this is equal to the minimum …\nNegates self, overflowing if this is equal to the minimum …\nNegates self in an overflowing fashion.\nNegates self in an overflowing fashion.\nNegates self in an overflowing fashion.\nNegates self in an overflowing fashion.\nNegates self in an overflowing fashion.\nNegates self, overflowing if this is equal to the minimum …\nNegates self in an overflowing fashion.\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nCalculates the remainder when <code>self</code> is divided by <code>rhs</code>.\nCalculates the remainder when <code>self</code> is divided by <code>rhs</code>.\nCalculates the remainder when <code>self</code> is divided by <code>rhs</code>.\nCalculates the remainder when <code>self</code> is divided by <code>rhs</code>.\nCalculates the remainder when <code>self</code> is divided by <code>rhs</code>.\nCalculates the remainder when <code>self</code> is divided by <code>rhs</code>.\nCalculates the remainder when <code>self</code> is divided by <code>rhs</code>.\nCalculates the remainder when <code>self</code> is divided by <code>rhs</code>.\nCalculates the remainder when <code>self</code> is divided by <code>rhs</code>.\nCalculates the remainder when <code>self</code> is divided by <code>rhs</code>.\nCalculates the remainder when <code>self</code> is divided by <code>rhs</code>.\nCalculates the remainder when <code>self</code> is divided by <code>rhs</code>.\nOverflowing Euclidean remainder. Calculates …\nOverflowing Euclidean remainder. Calculates …\nOverflowing Euclidean remainder. Calculates …\nOverflowing Euclidean remainder. Calculates …\nOverflowing Euclidean remainder. Calculates …\nCalculates the remainder <code>self.rem_euclid(rhs)</code> as if by …\nCalculates the remainder <code>self.rem_euclid(rhs)</code> as if by …\nCalculates the remainder <code>self.rem_euclid(rhs)</code> as if by …\nCalculates the remainder <code>self.rem_euclid(rhs)</code> as if by …\nCalculates the remainder <code>self.rem_euclid(rhs)</code> as if by …\nOverflowing Euclidean remainder. Calculates …\nCalculates the remainder <code>self.rem_euclid(rhs)</code> as if by …\nShifts self left by <code>rhs</code> bits.\nShifts self left by <code>rhs</code> bits.\nShifts self left by <code>rhs</code> bits.\nShifts self left by <code>rhs</code> bits.\nShifts self left by <code>rhs</code> bits.\nShifts self left by <code>rhs</code> bits.\nShifts self left by <code>rhs</code> bits.\nShifts self left by <code>rhs</code> bits.\nShifts self left by <code>rhs</code> bits.\nShifts self left by <code>rhs</code> bits.\nShifts self left by <code>rhs</code> bits.\nShifts self left by <code>rhs</code> bits.\nShifts self right by <code>rhs</code> bits.\nShifts self right by <code>rhs</code> bits.\nShifts self right by <code>rhs</code> bits.\nShifts self right by <code>rhs</code> bits.\nShifts self right by <code>rhs</code> bits.\nShifts self right by <code>rhs</code> bits.\nShifts self right by <code>rhs</code> bits.\nShifts self right by <code>rhs</code> bits.\nShifts self right by <code>rhs</code> bits.\nShifts self right by <code>rhs</code> bits.\nShifts self right by <code>rhs</code> bits.\nShifts self right by <code>rhs</code> bits.\nCalculates <code>self</code> - <code>rhs</code>\nCalculates <code>self</code> - <code>rhs</code>\nCalculates <code>self</code> - <code>rhs</code>\nCalculates <code>self</code> - <code>rhs</code>\nCalculates <code>self</code> - <code>rhs</code>\nCalculates <code>self</code> - <code>rhs</code>\nCalculates <code>self</code> - <code>rhs</code>\nCalculates <code>self</code> - <code>rhs</code>\nCalculates <code>self</code> - <code>rhs</code>\nCalculates <code>self</code> - <code>rhs</code>\nCalculates <code>self</code> - <code>rhs</code>\nCalculates <code>self</code> - <code>rhs</code>\nCalculates <code>self</code> - <code>rhs</code> with an unsigned <code>rhs</code>\nCalculates <code>self</code> - <code>rhs</code> with an unsigned <code>rhs</code>\nCalculates <code>self</code> - <code>rhs</code> with an unsigned <code>rhs</code>\nCalculates <code>self</code> - <code>rhs</code> with an unsigned <code>rhs</code>\nCalculates <code>self</code> - <code>rhs</code> with an unsigned <code>rhs</code>\nCalculates <code>self</code> - <code>rhs</code> with an unsigned <code>rhs</code>\nPanic support in the standard library.\nPanics the current thread.\nParses this string slice into another type.\nMoves all consecutive repeated elements to the end of the …\nMoves all but the first of consecutive elements to the end …\nMoves all but the first of consecutive elements to the end …\nReturns the index of the partition point according to the …\nHelper module for exporting the <code>pattern_type</code> macro\nCross-platform path manipulation.\nTypes that pin data to a location in memory.\nRaw, unsafe pointers, <code>*const T</code>, and <code>*mut T</code>.\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises a number to a floating point power.\nRaises a number to a floating point power.\nRaises a number to an integer power.\nRaises a number to an integer power.\nRaises a number to an integer power.\nRaises a number to an integer power.\nThe Rust Prelude\nThis module reexports the primitive types to allow usage …\nPrints to the standard output.\nPrints to the standard output, with a newline.\nA module for working with processes.\nManually manage memory through raw pointers.\nMake an item visible to others.\nSingle-threaded reference-counting pointers. ‘Rc’ …\nReturns an iterator over <code>chunk_size</code> elements of the slice …\nReturns an iterator over <code>chunk_size</code> elements of the slice …\nReturns an iterator over <code>chunk_size</code> elements of the slice …\nReturns an iterator over <code>chunk_size</code> elements of the slice …\nReads the value from <code>self</code> without moving it. This leaves …\nReads the value from <code>self</code> without moving it. This leaves …\nReads the value from <code>self</code> without moving it. This leaves …\nReads the value from <code>self</code> without moving it. This leaves …\nPerforms a volatile read of the value from <code>self</code> without …\nPerforms a volatile read of the value from <code>self</code> without …\nTakes the reciprocal (inverse) of a number, <code>1/x</code>.\nTakes the reciprocal (inverse) of a number, <code>1/x</code>.\nBind by reference during pattern matching.\nReferences, <code>&amp;T</code> and <code>&amp;mut T</code>.\nThis operation satisfies <code>n % d == n - (n / d) * d</code>, and …\nThis operation satisfies <code>n % d == n - (n / d) * d</code>, and …\nThis operation satisfies <code>n % d == n - (n / d) * d</code>, and …\nThis operation satisfies <code>n % d == n - (n / d) * d</code>, and …\nThis operation satisfies <code>n % d == n - (n / d) * d</code>, and …\nThis operation satisfies <code>n % d == n - (n / d) * d</code>, and …\nThis operation satisfies <code>n % d == n - (n / d) * d</code>, and …\nThis operation satisfies <code>n % d == n - (n / d) * d</code>, and …\nThis operation satisfies <code>n % d == n - (n / d) * d</code>, and …\nThis operation satisfies <code>n % d == n - (n / d) * d</code>, and …\nThis operation satisfies <code>n % d == n - (n / d) * d</code>, and …\nThis operation satisfies <code>n % d == n - (n / d) * d</code>, and …\nCalculates the least nonnegative remainder of …\nCalculates the least nonnegative remainder of …\nCalculates the least nonnegative remainder of …\nCalculates the least nonnegative remainder of …\nCalculates the least nonnegative remainder of …\nCalculates the least nonnegative remainder of …\nCalculates the least nonnegative remainder of …\nCalculates the least remainder of <code>self (mod rhs)</code>.\nCalculates the least remainder of <code>self (mod rhs)</code>.\nCalculates the least remainder of <code>self (mod rhs)</code>.\nCalculates the least remainder of <code>self (mod rhs)</code>.\nCalculates the least remainder of <code>self (mod rhs)</code>.\nCalculates the least nonnegative remainder of …\nCalculates the least remainder of <code>self (mod rhs)</code>.\nCreates a vector by copying a slice <code>n</code> times.\nCreates a new <code>String</code> by repeating a string <code>n</code> times.\nReplaces the value at <code>self</code> with <code>src</code>, returning the old …\nReplaces all matches of a pattern with another string.\nReplaces first N matches of a pattern with another string.\nError handling with the <code>Result</code> type.\nReturn a value from a function.\nReverses the order of elements in the slice, in place.\nReverses the order of bits in the integer. The least …\nReverses the order of bits in the integer. The least …\nReverses the order of bits in the integer. The least …\nReverses the order of bits in the integer. The least …\nReverses the order of bits in the integer. The least …\nReverses the order of bits in the integer. The least …\nReverses the order of bits in the integer. The least …\nReverses the order of bits in the integer. The least …\nReverses the order of bits in the integer. The least …\nReverses the order of bits in the integer. The least …\nReverses the order of bits in the integer. The least …\nReverses the order of bits in the integer. The least …\nReturns the byte index for the first character of the last …\nAn iterator over the disjoint matches of a pattern within …\nAn iterator over the disjoint matches of a pattern within …\nRotates the slice in-place such that the first <code>mid</code> …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nRotates the slice in-place such that the first …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nReturns the nearest integer to <code>self</code>. If a value is …\nReturns the nearest integer to <code>self</code>. If a value is …\nReturns the nearest integer to a number. Rounds half-way …\nReturns the nearest integer to a number. Rounds half-way …\nReturns an iterator over subslices separated by elements …\nAn iterator over substrings of the given string slice, …\nDivides one mutable array reference into two at an index …\nDivides one array reference into two at an index from the …\nReturns an iterator over mutable subslices separated by …\nSplits the slice on the last element that matches the …\nSplits the string on the last occurrence of the specified …\nAn iterator over substrings of <code>self</code>, separated by …\nReturns an iterator over subslices separated by elements …\nAn iterator over substrings of this string slice, …\nReturns an iterator over subslices separated by elements …\nSaturating absolute value. Computes <code>self.abs()</code>, returning …\nSaturating absolute value. Computes <code>self.abs()</code>, returning …\nSaturating absolute value. Computes <code>self.abs()</code>, returning …\nSaturating absolute value. Computes <code>self.abs()</code>, returning …\nSaturating absolute value. Computes <code>self.abs()</code>, returning …\nSaturating absolute value. Computes <code>self.abs()</code>, returning …\nSaturating integer addition. Computes <code>self + rhs</code>, …\nSaturating integer addition. Computes <code>self + rhs</code>, …\nSaturating integer addition. Computes <code>self + rhs</code>, …\nSaturating integer addition. Computes <code>self + rhs</code>, …\nSaturating integer addition. Computes <code>self + rhs</code>, …\nSaturating integer addition. Computes <code>self + rhs</code>, …\nSaturating integer addition. Computes <code>self + rhs</code>, …\nSaturating integer addition. Computes <code>self + rhs</code>, …\nSaturating integer addition. Computes <code>self + rhs</code>, …\nSaturating integer addition. Computes <code>self + rhs</code>, …\nSaturating integer addition. Computes <code>self + rhs</code>, …\nSaturating integer addition. Computes <code>self + rhs</code>, …\nSaturating addition with a signed integer. Computes …\nSaturating addition with a signed integer. Computes …\nSaturating addition with a signed integer. Computes …\nSaturating addition with a signed integer. Computes …\nSaturating addition with a signed integer. Computes …\nSaturating addition with a signed integer. Computes …\nSaturating addition with an unsigned integer. Computes …\nSaturating addition with an unsigned integer. Computes …\nSaturating addition with an unsigned integer. Computes …\nSaturating addition with an unsigned integer. Computes …\nSaturating addition with an unsigned integer. Computes …\nSaturating addition with an unsigned integer. Computes …\nSaturating integer division. Computes <code>self / rhs</code>, …\nSaturating integer division. Computes <code>self / rhs</code>, …\nSaturating integer division. Computes <code>self / rhs</code>, …\nSaturating integer division. Computes <code>self / rhs</code>, …\nSaturating integer division. Computes <code>self / rhs</code>, …\nSaturating integer division. Computes <code>self / rhs</code>, …\nSaturating integer division. Computes <code>self / rhs</code>, …\nSaturating integer division. Computes <code>self / rhs</code>, …\nSaturating integer division. Computes <code>self / rhs</code>, …\nSaturating integer division. Computes <code>self / rhs</code>, …\nSaturating integer division. Computes <code>self / rhs</code>, …\nSaturating integer division. Computes <code>self / rhs</code>, …\nSaturating integer multiplication. Computes <code>self * rhs</code>, …\nSaturating integer multiplication. Computes <code>self * rhs</code>, …\nSaturating integer multiplication. Computes <code>self * rhs</code>, …\nSaturating integer multiplication. Computes <code>self * rhs</code>, …\nSaturating integer multiplication. Computes <code>self * rhs</code>, …\nSaturating integer multiplication. Computes <code>self * rhs</code>, …\nSaturating integer multiplication. Computes <code>self * rhs</code>, …\nSaturating integer multiplication. Computes <code>self * rhs</code>, …\nSaturating integer multiplication. Computes <code>self * rhs</code>, …\nSaturating integer multiplication. Computes <code>self * rhs</code>, …\nSaturating integer multiplication. Computes <code>self * rhs</code>, …\nSaturating integer multiplication. Computes <code>self * rhs</code>, …\nSaturating integer negation. Computes <code>-self</code>, returning <code>MAX</code> …\nSaturating integer negation. Computes <code>-self</code>, returning <code>MAX</code> …\nSaturating integer negation. Computes <code>-self</code>, returning <code>MAX</code> …\nSaturating integer negation. Computes <code>-self</code>, returning <code>MAX</code> …\nSaturating integer negation. Computes <code>-self</code>, returning <code>MAX</code> …\nSaturating integer negation. Computes <code>-self</code>, returning <code>MAX</code> …\nSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating integer subtraction. Computes <code>self - rhs</code>, …\nSaturating integer subtraction. Computes <code>self - rhs</code>, …\nSaturating integer subtraction. Computes <code>self - rhs</code>, …\nSaturating integer subtraction. Computes <code>self - rhs</code>, …\nSaturating integer subtraction. Computes <code>self - rhs</code>, …\nSaturating integer subtraction. Computes <code>self - rhs</code>, …\nSaturating integer subtraction. Computes <code>self - rhs</code>, …\nSaturating integer subtraction. Computes <code>self - rhs</code>, …\nSaturating integer subtraction. Computes <code>self - rhs</code>, …\nSaturating integer subtraction. Computes <code>self - rhs</code>, …\nSaturating integer subtraction. Computes <code>self - rhs</code>, …\nSaturating integer subtraction. Computes <code>self - rhs</code>, …\nSaturating subtraction with an unsigned integer. Computes …\nSaturating subtraction with an unsigned integer. Computes …\nSaturating subtraction with an unsigned integer. Computes …\nSaturating subtraction with an unsigned integer. Computes …\nSaturating subtraction with an unsigned integer. Computes …\nSaturating subtraction with an unsigned integer. Computes …\nReorder the slice such that the element at <code>index</code> after the …\nReorder the slice with a comparator function such that the …\nReorder the slice with a key extraction function such that …\nThe receiver of a method, or the current module.\nReturns a number that represents the sign of <code>self</code>.\nReturns a number that represents the sign of <code>self</code>.\nReturns a number representing sign of <code>self</code>.\nReturns a number representing sign of <code>self</code>.\nReturns a number representing sign of <code>self</code>.\nReturns a number representing sign of <code>self</code>.\nReturns a number representing sign of <code>self</code>.\nReturns a number representing sign of <code>self</code>.\nPortable SIMD module.\nComputes the sine of a number (in radians).\nComputes the sine of a number (in radians).\nSimultaneously computes the sine and cosine of the number, …\nSimultaneously computes the sine and cosine of the number, …\nHyperbolic sine function.\nHyperbolic sine function.\nA dynamically-sized view into a contiguous sequence, <code>[T]</code>. …\nUtilities for the slice primitive type.\nCreates a string slice from another string slice, …\nCreates a string slice from another string slice, …\nSorts the slice.\nSorts the slice with a comparator function.\nSorts the slice with a key extraction function.\nSorts the slice with a key extraction function.\nSorts the slice of floats.\nSorts the slice of floats.\nSorts the slice, but might not preserve the order of equal …\nSorts the slice with a comparator function, but might not …\nSorts the slice with a key extraction function, but might …\nReturns an iterator over subslices separated by elements …\nAn iterator over substrings of this string slice, …\nDivides one mutable array reference into two at an index.\nDivides one array reference into two at an index.\nSplits a string slice by ASCII whitespace.\nDivides one slice into two at an index.\nDivide one string slice into two at an index.\nDivides one slice into two at an index, returning <code>None</code> if …\nDivide one string slice into two at an index.\nDivides one mutable raw slice into two at an index.\nDivides one mutable slice into two at an index.\nDivide one mutable string slice into two at an index.\nDivides one mutable slice into two at an index, returning …\nDivide one mutable string slice into two at an index.\nDivides one mutable raw slice into two at an index, …\nDivides one mutable slice into two at an index, without …\nDivides one slice into two at an index, without doing …\nReturns the first and all the rest of the elements of the …\nReturn an array reference to the first <code>N</code> items in the …\nReturn a mutable array reference to the first <code>N</code> items in …\nReturns the first and all the rest of the elements of the …\nReturns an iterator over subslices separated by elements …\nAn iterator over substrings of this string slice, …\nReturns an iterator over mutable subslices separated by …\nReturns the last and all the rest of the elements of the …\nReturn an array reference to the last <code>N</code> items in the slice …\nReturn a mutable array reference to the last <code>N</code> items in …\nReturns the last and all the rest of the elements of the …\nReturns an iterator over mutable subslices separated by …\nSplits the slice on the first element that matches the …\nSplits the string on the first occurrence of the specified …\nAn iterator over substrings of the given string slice, …\nSplits a string slice by whitespace.\nReturns an iterator over subslices separated by elements …\nAn iterator over substrings of the given string slice, …\nReturns an iterator over mutable subslices separated by …\nReturns the square root of a number.\nReturns the square root of a number.\nReturns <code>true</code> if <code>needle</code> is a prefix of the slice or equal …\nReturns <code>true</code> if the given pattern matches a prefix of this …\nA static item is a value which is valid for the entire …\nString slices.\nUtilities for the <code>str</code> primitive type.\nStrict absolute value. Computes <code>self.abs()</code>, panicking if …\nStrict absolute value. Computes <code>self.abs()</code>, panicking if …\nStrict absolute value. Computes <code>self.abs()</code>, panicking if …\nStrict absolute value. Computes <code>self.abs()</code>, panicking if …\nStrict absolute value. Computes <code>self.abs()</code>, panicking if …\nStrict absolute value. Computes <code>self.abs()</code>, panicking if …\nStrict integer addition. Computes <code>self + rhs</code>, panicking if …\nStrict integer addition. Computes <code>self + rhs</code>, panicking if …\nStrict integer addition. Computes <code>self + rhs</code>, panicking if …\nStrict integer addition. Computes <code>self + rhs</code>, panicking if …\nStrict integer addition. Computes <code>self + rhs</code>, panicking if …\nStrict integer addition. Computes <code>self + rhs</code>, panicking if …\nStrict integer addition. Computes <code>self + rhs</code>, panicking if …\nStrict integer addition. Computes <code>self + rhs</code>, panicking if …\nStrict integer addition. Computes <code>self + rhs</code>, panicking if …\nStrict integer addition. Computes <code>self + rhs</code>, panicking if …\nStrict integer addition. Computes <code>self + rhs</code>, panicking if …\nStrict integer addition. Computes <code>self + rhs</code>, panicking if …\nStrict addition with a signed integer. Computes <code>self + rhs</code>,\nStrict addition with a signed integer. Computes <code>self + rhs</code>,\nStrict addition with a signed integer. Computes <code>self + rhs</code>,\nStrict addition with a signed integer. Computes <code>self + rhs</code>,\nStrict addition with a signed integer. Computes <code>self + rhs</code>,\nStrict addition with a signed integer. Computes <code>self + rhs</code>,\nStrict addition with an unsigned integer. Computes …\nStrict addition with an unsigned integer. Computes …\nStrict addition with an unsigned integer. Computes …\nStrict addition with an unsigned integer. Computes …\nStrict addition with an unsigned integer. Computes …\nStrict addition with an unsigned integer. Computes …\nStrict integer division. Computes <code>self / rhs</code>, panicking if …\nStrict integer division. Computes <code>self / rhs</code>, panicking if …\nStrict integer division. Computes <code>self / rhs</code>, panicking if …\nStrict integer division. Computes <code>self / rhs</code>, panicking if …\nStrict integer division. Computes <code>self / rhs</code>, panicking if …\nStrict integer division. Computes <code>self / rhs</code>. Strict …\nStrict integer division. Computes <code>self / rhs</code>. Strict …\nStrict integer division. Computes <code>self / rhs</code>. Strict …\nStrict integer division. Computes <code>self / rhs</code>. Strict …\nStrict integer division. Computes <code>self / rhs</code>. Strict …\nStrict integer division. Computes <code>self / rhs</code>, panicking if …\nStrict integer division. Computes <code>self / rhs</code>. Strict …\nStrict Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nStrict Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nStrict Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nStrict Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nStrict Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nStrict Euclidean division. Computes <code>self.div_euclid(rhs)</code>. …\nStrict Euclidean division. Computes <code>self.div_euclid(rhs)</code>. …\nStrict Euclidean division. Computes <code>self.div_euclid(rhs)</code>. …\nStrict Euclidean division. Computes <code>self.div_euclid(rhs)</code>. …\nStrict Euclidean division. Computes <code>self.div_euclid(rhs)</code>. …\nStrict Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …\nStrict Euclidean division. Computes <code>self.div_euclid(rhs)</code>. …\nStrict integer multiplication. Computes <code>self * rhs</code>, …\nStrict integer multiplication. Computes <code>self * rhs</code>, …\nStrict integer multiplication. Computes <code>self * rhs</code>, …\nStrict integer multiplication. Computes <code>self * rhs</code>, …\nStrict integer multiplication. Computes <code>self * rhs</code>, …\nStrict integer multiplication. Computes <code>self * rhs</code>, …\nStrict integer multiplication. Computes <code>self * rhs</code>, …\nStrict integer multiplication. Computes <code>self * rhs</code>, …\nStrict integer multiplication. Computes <code>self * rhs</code>, …\nStrict integer multiplication. Computes <code>self * rhs</code>, …\nStrict integer multiplication. Computes <code>self * rhs</code>, …\nStrict integer multiplication. Computes <code>self * rhs</code>, …\nStrict negation. Computes <code>-self</code>, panicking if <code>self == MIN</code>.\nStrict negation. Computes <code>-self</code>, panicking if <code>self == MIN</code>.\nStrict negation. Computes <code>-self</code>, panicking if <code>self == MIN</code>.\nStrict negation. Computes <code>-self</code>, panicking if <code>self == MIN</code>.\nStrict negation. Computes <code>-self</code>, panicking if <code>self == MIN</code>.\nStrict negation. Computes <code>-self</code>, panicking unless <code>self == 0</code>…\nStrict negation. Computes <code>-self</code>, panicking unless <code>self == 0</code>…\nStrict negation. Computes <code>-self</code>, panicking unless <code>self == 0</code>…\nStrict negation. Computes <code>-self</code>, panicking unless <code>self == 0</code>…\nStrict negation. Computes <code>-self</code>, panicking unless <code>self == 0</code>…\nStrict negation. Computes <code>-self</code>, panicking if <code>self == MIN</code>.\nStrict negation. Computes <code>-self</code>, panicking unless <code>self == 0</code>…\nStrict exponentiation. Computes <code>self.pow(exp)</code>, panicking if\nStrict exponentiation. Computes <code>self.pow(exp)</code>, panicking if\nStrict exponentiation. Computes <code>self.pow(exp)</code>, panicking if\nStrict exponentiation. Computes <code>self.pow(exp)</code>, panicking if\nStrict exponentiation. Computes <code>self.pow(exp)</code>, panicking if\nStrict exponentiation. Computes <code>self.pow(exp)</code>, panicking if\nStrict exponentiation. Computes <code>self.pow(exp)</code>, panicking if\nStrict exponentiation. Computes <code>self.pow(exp)</code>, panicking if\nStrict exponentiation. Computes <code>self.pow(exp)</code>, panicking if\nStrict exponentiation. Computes <code>self.pow(exp)</code>, panicking if\nStrict exponentiation. Computes <code>self.pow(exp)</code>, panicking if\nStrict exponentiation. Computes <code>self.pow(exp)</code>, panicking if\nStrict integer remainder. Computes <code>self % rhs</code>, panicking if\nStrict integer remainder. Computes <code>self % rhs</code>, panicking if\nStrict integer remainder. Computes <code>self % rhs</code>, panicking if\nStrict integer remainder. Computes <code>self % rhs</code>, panicking if\nStrict integer remainder. Computes <code>self % rhs</code>, panicking if\nStrict integer remainder. Computes <code>self % rhs</code>. Strict …\nStrict integer remainder. Computes <code>self % rhs</code>. Strict …\nStrict integer remainder. Computes <code>self % rhs</code>. Strict …\nStrict integer remainder. Computes <code>self % rhs</code>. Strict …\nStrict integer remainder. Computes <code>self % rhs</code>. Strict …\nStrict integer remainder. Computes <code>self % rhs</code>, panicking if\nStrict integer remainder. Computes <code>self % rhs</code>. Strict …\nStrict Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>, …\nStrict Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>, …\nStrict Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>, …\nStrict Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>, …\nStrict Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>, …\nStrict Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>. …\nStrict Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>. …\nStrict Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>. …\nStrict Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>. …\nStrict Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>. …\nStrict Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>, …\nStrict Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>. …\nStrict shift left. Computes <code>self &lt;&lt; rhs</code>, panicking if <code>rhs</code> …\nStrict shift left. Computes <code>self &lt;&lt; rhs</code>, panicking if <code>rhs</code> …\nStrict shift left. Computes <code>self &lt;&lt; rhs</code>, panicking if <code>rhs</code> …\nStrict shift left. Computes <code>self &lt;&lt; rhs</code>, panicking if <code>rhs</code> …\nStrict shift left. Computes <code>self &lt;&lt; rhs</code>, panicking if <code>rhs</code> …\nStrict shift left. Computes <code>self &lt;&lt; rhs</code>, panicking if <code>rhs</code> …\nStrict shift left. Computes <code>self &lt;&lt; rhs</code>, panicking if <code>rhs</code> …\nStrict shift left. Computes <code>self &lt;&lt; rhs</code>, panicking if <code>rhs</code> …\nStrict shift left. Computes <code>self &lt;&lt; rhs</code>, panicking if <code>rhs</code> …\nStrict shift left. Computes <code>self &lt;&lt; rhs</code>, panicking if <code>rhs</code> …\nStrict shift left. Computes <code>self &lt;&lt; rhs</code>, panicking if <code>rhs</code> …\nStrict shift left. Computes <code>self &lt;&lt; rhs</code>, panicking if <code>rhs</code> …\nStrict shift right. Computes <code>self &gt;&gt; rhs</code>, panicking <code>rhs</code> is …\nStrict shift right. Computes <code>self &gt;&gt; rhs</code>, panicking <code>rhs</code> is …\nStrict shift right. Computes <code>self &gt;&gt; rhs</code>, panicking <code>rhs</code> is …\nStrict shift right. Computes <code>self &gt;&gt; rhs</code>, panicking <code>rhs</code> is …\nStrict shift right. Computes <code>self &gt;&gt; rhs</code>, panicking <code>rhs</code> is …\nStrict shift right. Computes <code>self &gt;&gt; rhs</code>, panicking <code>rhs</code> is …\nStrict shift right. Computes <code>self &gt;&gt; rhs</code>, panicking <code>rhs</code> is …\nStrict shift right. Computes <code>self &gt;&gt; rhs</code>, panicking <code>rhs</code> is …\nStrict shift right. Computes <code>self &gt;&gt; rhs</code>, panicking <code>rhs</code> is …\nStrict shift right. Computes <code>self &gt;&gt; rhs</code>, panicking <code>rhs</code> is …\nStrict shift right. Computes <code>self &gt;&gt; rhs</code>, panicking <code>rhs</code> is …\nStrict shift right. Computes <code>self &gt;&gt; rhs</code>, panicking <code>rhs</code> is …\nStrict integer subtraction. Computes <code>self - rhs</code>, panicking …\nStrict integer subtraction. Computes <code>self - rhs</code>, panicking …\nStrict integer subtraction. Computes <code>self - rhs</code>, panicking …\nStrict integer subtraction. Computes <code>self - rhs</code>, panicking …\nStrict integer subtraction. Computes <code>self - rhs</code>, panicking …\nStrict integer subtraction. Computes <code>self - rhs</code>, panicking …\nStrict integer subtraction. Computes <code>self - rhs</code>, panicking …\nStrict integer subtraction. Computes <code>self - rhs</code>, panicking …\nStrict integer subtraction. Computes <code>self - rhs</code>, panicking …\nStrict integer subtraction. Computes <code>self - rhs</code>, panicking …\nStrict integer subtraction. Computes <code>self - rhs</code>, panicking …\nStrict integer subtraction. Computes <code>self - rhs</code>, panicking …\nStrict subtraction with an unsigned integer. Computes …\nStrict subtraction with an unsigned integer. Computes …\nStrict subtraction with an unsigned integer. Computes …\nStrict subtraction with an unsigned integer. Computes …\nStrict subtraction with an unsigned integer. Computes …\nStrict subtraction with an unsigned integer. Computes …\nA UTF-8–encoded, growable string.\nStringifies its arguments.\nReturns a subslice with the prefix removed.\nReturns a string slice with the prefix removed.\nRemoves the pattern from the front of haystack, if it …\nReturns a subslice with the suffix removed.\nReturns a string slice with the suffix removed.\nRemoves the pattern from the back of haystack, if it …\nA type that is composed of other types.\nCalculates the offset from a pointer (convenience for …\nCalculates the offset from a pointer (convenience for …\nCalculates the distance between two pointers, <em>where it’s </em>…\nCalculates the distance between two pointers, <em>where it’s </em>…\nThe parent of the current module.\nSwaps the values at two mutable locations of the same …\nSwaps two elements in the slice.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nReverses the byte order of the integer.\nSwaps two elements in the slice, without doing bounds …\nSwaps all elements in <code>self</code> with those in <code>other</code>.\nUseful synchronization primitives.\nRemoves the subslice corresponding to the given range and …\nRemoves the first element of the slice and returns a …\nRemoves the first element of the slice and returns a …\nRemoves the last element of the slice and returns a …\nRemoves the last element of the slice and returns a mutable\nRemoves the subslice corresponding to the given range and …\nComputes the tangent of a number (in radians).\nComputes the tangent of a number (in radians).\nHyperbolic tangent function.\nHyperbolic tangent function.\nTypes and Traits for working with asynchronous tasks.\nReturns <code>Some(f())</code> if the <code>bool</code> is <code>true</code>, or <code>None</code> otherwise.\nReturns <code>Some(t)</code> if the <code>bool</code> is <code>true</code>, or <code>None</code> otherwise.\nNative threads.\nDeclare a new thread local storage key of type …\nTemporal quantification.\nMakes a copy of the value in its ASCII lower case …\nReturns a vector containing a copy of this slice where …\nReturns a copy of this string where each character is …\nMakes a copy of the value in its ASCII lower case …\nMakes a copy of the value in its ASCII upper case …\nReturns a vector containing a copy of this slice where …\nReturns a copy of this string where each character is …\nMakes a copy of the value in its ASCII upper case …\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nConverts <code>self</code> to big endian from the target’s endianness.\nReturn the memory representation of this floating point …\nReturn the memory representation of this floating point …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nCasts a pointer to its raw bits.\nCasts a pointer to its raw bits.\nRaw transmutation to <code>u16</code>.\nRaw transmutation to <code>u32</code>.\nRaw transmutation to <code>u64</code>.\nRaw transmutation to <code>u128</code>.\nConverts radians to degrees.\nConverts radians to degrees.\nConverts a <code>char</code> to a digit in the given radix.\nRounds toward zero and converts to any primitive integer …\nRounds toward zero and converts to any primitive integer …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nConverts <code>self</code> to little endian from the target’s …\nReturn the memory representation of this floating point …\nReturn the memory representation of this floating point …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nReturns an iterator that yields the lowercase mapping of …\nReturns the lowercase equivalent of this string slice, as …\nReturn the memory representation of this floating point …\nReturn the memory representation of this floating point …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nReturn the memory representation of this integer as a byte …\nConverts degrees to radians.\nConverts degrees to radians.\nDecompose a (possibly wide) pointer into its data pointer …\nDecompose a (possibly wide) pointer into its data pointer …\nReturns an iterator that yields the uppercase mapping of …\nReturns the uppercase equivalent of this string slice, as …\nCopies <code>self</code> into a new <code>Vec</code>.\nCopies <code>self</code> into a new <code>Vec</code> with an allocator.\nIndicates unfinished code.\nReturn the ordering between <code>self</code> and <code>other</code>.\nReturn the ordering between <code>self</code> and <code>other</code>.\nEnables or disables tracing functionality used for …\nReturns the number of trailing ones in the binary …\nReturns the number of trailing ones in the binary …\nReturns the number of trailing ones in the binary …\nReturns the number of trailing ones in the binary …\nReturns the number of trailing ones in the binary …\nReturns the number of trailing ones in the binary …\nReturns the number of trailing ones in the binary …\nReturns the number of trailing ones in the binary …\nReturns the number of trailing ones in the binary …\nReturns the number of trailing ones in the binary …\nReturns the number of trailing ones in the binary …\nReturns the number of trailing ones in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nA common interface for a group of types.\nTransposes a <code>[MaybeUninit&lt;T&gt;; N]</code> into a <code>MaybeUninit&lt;[T; N]&gt;</code>…\nReturns a string slice with leading and trailing …\nReturns a byte slice with leading and trailing ASCII …\nReturns a string slice with leading and trailing ASCII …\nReturns a byte slice with trailing ASCII whitespace bytes …\nReturns a string slice with trailing ASCII whitespace …\nReturns a byte slice with leading ASCII whitespace bytes …\nReturns a string slice with leading ASCII whitespace …\nReturns a string slice with trailing whitespace removed.\nReturns a string slice with all suffixes that match a …\nReturns a string slice with leading whitespace removed.\nReturns a string slice with all prefixes that match a …\nReturns a string slice with all prefixes and suffixes that …\nReturns a string slice with trailing whitespace removed.\nReturns a string slice with all suffixes that match a …\nReturns a string slice with leading whitespace removed.\nReturns a string slice with all prefixes that match a …\nA value of type <code>bool</code> representing logical <strong>true</strong>.\nReturns the integer part of <code>self</code>. This means that …\nReturns the integer part of <code>self</code>. This means that …\nUnwraps a result or propagates its error.\nGets the entire contents of the <code>Vec&lt;T&gt;</code> as an array, if its …\nTries to convert an <code>&amp;OsStr</code> to a <code>&amp;str</code>.\nTry to create the target number type from a source number …\nTry to create the target number type from a source number …\nTry to create the target number type from a source number …\nTry to create the target number type from a source number …\nTry to create the target number type from a source number …\nTry to create the target number type from a source number …\nTry to create the target number type from a source number …\nTry to create the target number type from a source number …\nTry to create the target number type from a source number …\nTry to create the target number type from a source number …\nTry to create the target number type from a source number …\nTry to create the target number type from a source number …\nTry to create the target number type from a source number …\nTry to create the target number type from a source number …\nTry to create the target number type from a source number …\nTry to create the target number type from a source number …\nTry to create the target number type from a source number …\nTry to create the target number type from a source number …\nTry to create the target number type from a source number …\nTry to create the target number type from a source number …\nTry to create the target number type from a source number …\nTry to create the target number type from a source number …\nTry to create the target number type from a source number …\nTry to create the target number type from a source number …\nTry to create the target number type from a source number …")